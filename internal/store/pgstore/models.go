// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package pgstore

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type State string

const (
	StateNormal State = "normal"
	StateTruco  State = "truco"
	StateSeis   State = "seis"
	StateNove   State = "nove"
)

func (e *State) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = State(s)
	case string:
		*e = State(s)
	default:
		return fmt.Errorf("unsupported scan type for State: %T", src)
	}
	return nil
}

type NullState struct {
	State State
	Valid bool // Valid is true if State is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullState) Scan(value interface{}) error {
	if value == nil {
		ns.State, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.State.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.State), nil
}

type ChatMessage struct {
	ID        uuid.UUID
	RoomID    uuid.UUID
	Message   string
	Player    uuid.UUID
	CreatedAt pgtype.Date
}

type Game struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	Result    []byte
	State     State
	Round     int32
	DeckID    pgtype.Text
}

type Player struct {
	ID     uuid.UUID
	Name   string
	RoomID uuid.UUID
}
